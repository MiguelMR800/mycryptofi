name: Fetch crypto news and affiliates

on:
  schedule:
    - cron: "0 6 * * *"   # 06:00 UTC = 09:00 Helsinki
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: fetch-news
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4 lxml python-dateutil

      - name: Fetch and update data
        run: |
          python - <<'EOF'
          import json, os, time, hashlib
          import requests
          from bs4 import BeautifulSoup
          from urllib.parse import urljoin

          HEADERS = {"User-Agent": "MyCryptoFI Bot/1.0"}
          TIMEOUT = 15

          SITES = [
              {"base": "https://cointelegraph.com/", "limit": 8},
              {"base": "https://www.coindesk.com/", "limit": 8},
              {"base": "https://decrypt.co/", "limit": 8},
          ]

          def fetch_site(site):
              base = site["base"]
              r = requests.get(base, headers=HEADERS, timeout=TIMEOUT)
              r.raise_for_status()
              soup = BeautifulSoup(r.text, "lxml")
              links = []
              for sel in ["article h2 a", "h2 a", "article h3 a", "h3 a"]:
                  for a in soup.select(sel):
                      title = a.get_text(strip=True)
                      href = a.get("href")
                      if not title or not href:
                          continue
                      full = href if href.startswith("http") else urljoin(base, href)
                      links.append({"title": title, "url": full, "source": base})
                  if links:
                      break
              return links[:site["limit"]]

          def read_json(path):
              if not os.path.exists(path):
                  return []
              try:
                  with open(path, "r", encoding="utf-8") as f:
                      return json.load(f)
              except Exception:
                  return []

          def write_json(path, data):
              with open(path, "w", encoding="utf-8") as f:
                  json.dump(data, f, ensure_ascii=False, indent=2)

          # --- News ---
          old_news = read_json("data/news.json" if os.path.exists("data") else "news.json")
          new_news = []
          for site in SITES:
              try:
                  new_news += fetch_site(site)
                  time.sleep(0.5)
              except Exception as e:
                  print(f"[WARN] {site['base']} failed: {e}")

          seen = set()
          merged = []
          for item in new_news + old_news:
              if item["url"] not in seen:
                  seen.add(item["url"])
                  merged.append(item)
          merged = merged[:60]

          old_hash = hashlib.sha256(json.dumps(old_news, sort_keys=True).encode()).hexdigest()
          new_hash = hashlib.sha256(json.dumps(merged, sort_keys=True).encode()).hexdigest()

          if old_hash != new_hash:
              path = "data/news.json" if os.path.exists("data") else "news.json"
              write_json(path, merged)
              print("✅ News updated.")
          else:
              print("ℹ️ No news change detected.")

          # --- Affiliates ---
          affiliates_path = "data/affiliates.json" if os.path.exists("data") else "affiliates.json"
          affiliates = read_json(affiliates_path)
          icon_map = {
              "binance": "https://cdn.simpleicons.org/binance/333",
              "bybit": "https://cdn.simpleicons.org/bybit/333",
              "bitget": "https://cdn.simpleicons.org/bitget/333",
              "mexc": "https://cdn.simpleicons.org/mexc/333",
              "ledger": "https://cdn.simpleicons.org/ledger/333",
              "trezor": "https://cdn.simpleicons.org/trezor/333",
          }
          fallback = "mycryptofi_logo_key.png"

          for ex in affiliates:
              name = (ex.get("name") or "").lower()
              ex["icon"] = icon_map.get(name, fallback)

          write_json(affiliates_path, affiliates)
          print("✅ Affiliates updated.")
          EOF

      - name: Commit and push if changed
        run: |
          git config --global user.name "MyCryptoFI Bot"
          git config --global user.email "bot@mycryptofi.com"

          if git diff --quiet --exit-code; then
            echo "ℹ️ No file changes to commit."
          else
            git add news.json affiliates.json data/news.json data/affiliates.json 2>/dev/null || true
            git commit -m "Auto-update news & affiliates"
            git push
          fi
